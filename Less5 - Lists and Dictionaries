@@ LIST []

List 定義- 
	List是一種datatype（就像是strings, numbers, booleans），用來將不用的資訊存放在同一個變數底下。
	用中括號[]來表示，也可以是空的。ex. enpty_list = []，可以在逗號後面換行。
	在list中的所有資料沒有強制要求要是同一種datatype，但是建議使用相同的類型可以讓後續的調用上較為容易
	
List呼叫 - 
	呼叫的方式是【list名稱[index]】，index用來識別在list中的位置，從0開始計算

List內容重新指定 - 
	List名稱[index]除了可以用來呼叫，也可以跟變數一樣用來重新指派。

List長度 - 
	List本身沒有長度限制，可以透過【List名稱.append(要加入的資料)】隨時追加到【最後面】
	透過【len(list)name】來確認長度

擷取list的部分內容 - 包左不包右。
	透過【list名稱[1:3]】來擷取所需要的list內容片段。從左邊的寫法，會擷取從list[1]到list[2]。
	如果是【list名稱[1:]】就是擷取list[1]擷取大最後，而【list名稱[:3]】就是從頭擷取到list[2]
	此外，這個方法也可以用來擷取string的其中部分

List維護 - 
	透過【list.index(data)】來取得對應的index位置。注意：這邊使用的是中括號。
	透過【list.index(index, content)】可以在對應的位置填入新的資料。原本及其後面的都會向後移動一個位置。
	透過【list.sort()】來排序list的內容，數字由小至大，字母由a到z。
	透過【list.remove(value)】來移除特定的值。

透過For迴圈來對list的內容進行動作 -
	CODE：for <var name>	in <list>:
	透過上面的方式來進行，就會將<var name>這個變數，套用list裡面的所有值來進行。
	Sample: 
	my_list = [1,2,3,4,5]
	for number in my_list:
		print number
	上述代碼，會將1,2,3,4,5分別列印出來！

@@ KEY / DICTIONARY {}
	
Dictionary定義 - 
	概念有點像是電話簿，每個人(key)有對應的號碼(value)
	用大括號包起來，其中的組合為：{key1 : value1, key2 : value2, key3 : value3}。定義的時後可以在逗號的後面換行。
	呼叫的方式是【dictionary_name[key]】

新增內容 - 
	跟list一樣是可以變的！
	可以透過【enpty_d = {}】來定義一個空的dictionary，後續再加入內容
	加入內容的方法是【dictionary_name[new_key] = new_value】
	透過【len(dictionary_name)】來確認長度，計算的結果是總共有幾【對】值，一個key加上一個value視為一對！List的部分則是列出有幾【個】值。輸出的結果是整數int

異動內容 - 
	移除特定的組合：del dictionary_name[key]
	重新指派特定key對應的值：dictionary_name[key] = new_value

Dictionary 跟 List整合 - 
	Sample code:
	my_dict = {
  		"fish": ["c", "a", "r", "p"],
  		"cash": -4483,
  		"luck": "good"
		}
	print my_dict["fish"][0]
	上述代碼中，可以看到fish這個對應的value是一個list，透過這樣的方式來呼叫出"c"。

FOR迴圈簡介 - 
	For迴圈將會循環最左邊或是第0個元素到最右邊的，結構如下：
		a = ["List", "of", "some", "sort"]
		for x in a: # Do something for every x
	在以下範例中，將會依序印出1、3和21。
		for item in [1, 3, 21]: 
  		print item
  	在for跟in中間的是變數名稱，注意變數不要使用保留字（也就是有特殊用途的字）作為變數命名。
  	可以使用for迴圈來循環dictioinary裡面的key。

注意！！！Dictionary的輪詢是沒有順序性的，所以沒有辦法去控制訓輪的先後，每一次輪詢dictionary的時候，都會去輪詢每個key。
	Sample Code: 
		d = {"foo":"bar"}
		for key in d:
  			print (d[key]) # print "bar"

For迴圈 + IF判斷式 - 
	在for迴圈中，其中包含的代碼可多可少。在輪詢的時候，可以依照需求來決定不同的動作。
	Sample Code: 
		numbers = [1, 3, 4, 7]
		for number in numbers: 
  			if number > 6:
    			print number # will print 7
	說明：
		1. 有4個整數在number這個list當中。
		2. 在FOR迴圈當中會去輪詢numbers當中的所有整數number。
		3. 在輪詢每個number的時候，只要大於6就會把number列印出來，所以只有7會印出來。
		4. 撰寫這段代碼的時候要記得縮行。

List + Function - 
	Sample Code: 
		def count_small(numbers):
  			total = 0
  			for n in numbers:
    			if n < 10:
      				total = total + 1
  			return total 
 
		lotto = [4, 8, 15, 16, 23, 42]
		small = count_small(lotto)
		print small
	說明：
		1. 定義一個function名為count_small，以及一個叫做numbers的parameter。
		2. 定義一個變數total，指定初始值為0。稍後會用在for迴圈當中。
		3. 在number當中的每一個項目n，如果n小於10，則會在total加上1。
		4. 完成迴圈後，返回total的值。注意：要加在def內，如果加在for迴圈內，輪詢第一個元素後就會停止！[function內只要執行到return，不管返回什麼，都會直接退出]
			參考：https://discuss.codecademy.com/t/why-does-my-fizz-count-return-1-instead-of-the-correct-answer/339196
		5. 完成迴圈後，定義一個名為lotto的list。
		6. 定義一個變數small，定義為呼叫count_small function，並且帶入lotto作為parameter。
		7. 最後列印出small的結果2，因為只有4跟8小於10。
		
String Looping - 
	在【For迴圈 + IF判斷式】當中，使用fo迴圈來輪詢list。
	如果是【for letter in "STRING"】的話，則會輪詢每一個單字。此時的 print letter結果會是分別印出S/T/R/I/N/G總共六個字母。

用同一組key來輪詢不同的dictionary - 
	只有在不同的dictionary中使用相同的key，就可以做到！Sample Code:
		once  = {'a': 1, 'b': 2}
		twice = {'a': 2, 'b': 4}
		for key in once:
  			print "Once: %s" % once[key]
  			print "Twice: %s" % twice[key]
  	執行結果就會是：
  		Once: 1
		Twice: 2
		Once: 2
		Twice: 4

簡單的計算加總 - 
	Sample Code: 
		def sum(numbers):
  			total = 0
  			for number in numbers:
    			total += number
  			return total
 
		n = [1, 2, 5, 10, 13]
		print (sum(n))
	說明：
		1. 定義一個名為sum的function，以及一個名為numbers的parameter。
		2. 宣告一個初始值為0的變數total。
		3. 在list中的每一個number，都會在加上彼此。
		4. 返回加總的結果給total
		5. 定義含有數字的list n。
		6. 呼叫sum function來計算n中數字加總的結果，列印出31。




